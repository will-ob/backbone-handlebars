// Generated by CoffeeScript 1.6.3
/*
 Backbone Handlebars via RequireJS

 Author: Radoslav Stankov
 Adapted by: Will O'Brien
 Project site: https://github.com/will-ob/backbone-handlebars
 Licensed under the MIT License.
*/


(function() {
  require(['handlebars', 'backbone'], function(Handlebars, Backbone) {
    var BH, _compile, _remove;
    BH = {
      VERSION: '1.0.0',
      postponed: {},
      rendered: {},
      postponeRender: function(name, options, parentView) {
        var cid, hash, placeholderId, viewDeferred, _base, _ref,
          _this = this;
        if (options == null) {
          options = {};
        }
        placeholderId = _.uniqueId('_bh_tmp');
        hash = _.clone(options.hash);
        viewDeferred = new $.Deferred;
        (((_ref = options.data) != null ? _ref.require : void 0) || require)([name], function(viewClass) {
          var view;
          if (viewClass) {
            view = new viewClass(hash);
            if (options.fn != null) {
              view.template = options.fn;
            }
            return viewDeferred.resolve(placeholderId, view);
          } else {
            return viewDeferred.reject("Invalid view name - " + name);
          }
        }, function(err) {
          viewDeferred.reject("Invalid view name - " + name);
          throw "Invalid view name - " + name;
        });
        cid = (parentView || options.data.view).cid;
        if ((_base = this.postponed)[cid] == null) {
          _base[cid] = [];
        }
        this.postponed[cid].push(viewDeferred.promise());
        return "<div id='" + placeholderId + "'></div>";
      },
      renderPostponed: function(parentView) {
        var cid;
        cid = parentView.cid;
        this.rendered[cid] = _.map(this.postponed[parentView.cid], function(viewPromise) {
          viewPromise.done(function(placeholderId, view) {
            view.render();
            return parentView.$("#" + placeholderId).replaceWith(view.el);
          });
          return viewPromise;
        });
        return delete this.postponed[cid];
      },
      clearRendered: function(parentView) {
        var cid;
        cid = parentView.cid;
        if (this.rendered[cid]) {
          _(this.rendered[cid]).each(function(prom) {
            return prom.done(function(id, view) {
              return view.remove();
            });
          });
          return delete this.rendered[cid];
        }
      }
    };
    Handlebars.registerHelper('require', function() {
      return "";
    });
    Handlebars.registerHelper('view', function(name, options) {
      return new Handlebars.SafeString(BH.postponeRender(name, options, this._parentView));
    });
    Handlebars.registerHelper('views', function(name, models, options) {
      var callback, markers,
        _this = this;
      callback = function(model) {
        options.hash.model = model;
        return BH.postponeRender(name, options, _this._parentView);
      };
      markers = 'map' in models ? models.map(callback) : _.map(callback);
      return new Handlebars.SafeString(markers.join(''));
    });
    _compile = Handlebars.compile;
    Handlebars.compile = function(template, options) {
      if (options == null) {
        options = {};
      }
      options.data = true;
      return _compile.call(this, template, options);
    };
    Backbone.View.prototype.renderTemplate = function(context) {
      if (context == null) {
        context = {};
      }
      BH.clearRendered(this);
      context = _.clone(context);
      context._parentView = this;
      this.$el.html(this.template(context, {
        data: {
          view: this,
          require: this.template.require
        }
      }));
      BH.renderPostponed(this);
      return this;
    };
    Backbone.View.prototype.renderedSubViews = function() {
      return BH.rendered[this.cid];
    };
    _remove = Backbone.View.prototype.remove;
    Backbone.View.prototype.remove = function() {
      BH.clearRendered(this);
      return _remove.apply(this, arguments);
    };
    Backbone.View.prototype.render = function() {
      if (this.template) {
        this.renderTemplate(typeof this.templateData === 'function' ? this.templateData() : this.templateData);
      }
      return this;
    };
    Backbone.View.prototype.templateData = function() {
      return {};
    };
    return Backbone.Handlebars = BH;
  });

}).call(this);
